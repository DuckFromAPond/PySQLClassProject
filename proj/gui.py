
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import pymysql.cursors

import tkinter.messagebox

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\ASUS\Desktop\proj\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

window.geometry("1400x700")
window.configure(bg = "#000000")    


selected = [] #CHRID on the hall table, also for holding temp choices
taken = [] #for holding CHRID taken already
user = 0 #UID on the main table, #admin: user = 0
userID = [] #UID on the hall table
CurrentSession = "admin"
hall = "hall1"
moviename = "Avengers: End Game"
count = 0 
username = ""
email = ""

SeatNotSelected = PhotoImage(
    file=relative_to_assets("seat(unselected).png"))
SeatSelected = PhotoImage(
    file=relative_to_assets("seat(selected).png"))
SeatTaken = PhotoImage(
    file=relative_to_assets("seat(taken).png"))

def updatetaken():
    global taken
    taken = []
    global userID
    userID = []
    conn = None
    try:
        # STEP 2 - CONNECT WITH MYSQL DATABASE
        conn = pymysql.connect(host='127.0.0.1', user='root', password='', db='pythonProject')

    except Exception as ex:
        print('PROBLEM WITH Database Connection', ex)
    else:
        print('Database Connection SUCCESS')

    # STEP 3 - CHECK Connection is Establish or not
    if conn is not None:
        global hall
        # STEP 4 - Create Query
        query = "select * from " + hall
        try:
            # STEP 5 - CREATE cursor Object
            cursor = conn.cursor()

            # STEP 6 - EXECUTE THE Query
            cursor.execute(query)

        except Exception as e:
            print('RECORD FETCHING PROBLEM ', e)
        else:
            # STEP 7 - DISPLAY RECORDS
            # Fetch Each Record In Dictionary Format
            for record in cursor:
                # Attribute NAME CASE SENSITIVE
                taken.append(record[0]) #seatID in table
                userID.append(record[1]) #ID in table
            #print(taken)
            #print(userID)
        finally:
            # STEP 8 - CLOSE CONNECTION
            conn.close()

def button_click_reg(entry_1, entry_2, entry_3):
    conn = None
    try:
        # STEP 2 - CONNECT WITH MYSQL DATABASE
        conn = pymysql.connect(host='127.0.0.1', user='root', password='', db='pythonProject')

    except Exception as ex:
        print('PROBLEM WITH Database Connection', ex)
    else:
        print('Database Connection SUCCESS')

    # STEP 3 - CHECK Connection is Establish or not
    if conn is not None:

        # STEP 4 - Create Query
        query = "insert into users(email, username, password) values (%s, %s, %s) "
        try:
            # STEP - 5 TAKE INPUT FROM USER
            email = entry_3.get()
            username = entry_1.get()
            password = entry_2.get()
            if username.strip().lower() == "admin":
                tkinter.messagebox.showerror("Notice", "Account cannot be created with that username")
                conn.close()
                return None
        except Exception as e:
            print('INPUT ERROR ', e)
        else:
            try:
                # STEP 6 - CREATE cursor Object
                cursor = conn.cursor()

                # STEP 7 - EXECUTE THE Query
                noofrecoredinsert = cursor.execute(query, (email, username, password))
            except Exception as e:
                print('INSERT PROBLEM ', e)
                tkinter.messagebox.showerror("Notice: INSERT PROBLEM", e)
            else:
                if noofrecoredinsert > 0:
                    print()
                    print('RECORD INSERTED ')
                    tkinter.messagebox.showinfo("Notice", "Your Account Was Created.")
                    # STEP 8 - Commit Database
                    conn.commit()
                else:
                    print('RECORD NOT INSERTED')
                    tkinter.messagebox.showerror("Notice", "Your Account Was Not Created.")
            finally:
                conn.close()

def button_click_book(entry_1, canvas, txttl, txtst):
    conn = None
    global selected
    try:
        # STEP 2 - CONNECT WITH MYSQL DATABASE
        conn = pymysql.connect(host='127.0.0.1', user='root', password='', db='pythonProject')

    except Exception as ex:
        print('PROBLEM WITH Database Connection', ex)
    else:
        print('Database Connection SUCCESS')

    # STEP 3 - CHECK Connection is Establish or not
    if conn is not None:
        global hall
        # STEP 4 - Create Query
        query = "insert into "+hall+"(SeatID, ID, voucher) values (%s, %s, %s) "
        try:
            # STEP - 5 TAKE INPUT FROM USER
            global user
            voucher = entry_1.get()
            if voucher == "123456": 
                vouchcheck = True
                tkinter.messagebox.showinfo("Notice", "voucher is valid")
                total = (20 * len(selected))*0.8
                canvas.itemconfig(txttl, text=("Total: $" + str(total)))
            else: 
                vouchcheck = False
        except Exception as e:
            print('INPUT ERROR ', e)
        else:
            try:
                # STEP 6 - CREATE cursor Object
                cursor = conn.cursor()

                # STEP 7 - EXECUTE THE Query
                for i in range(0,len(selected)):
                    noofrecoredinsert = cursor.execute(query, (selected[i], user, vouchcheck))
            except Exception as e:
                print('INSERT PROBLEM ', e)
                tkinter.messagebox.showerror("Notice: INSERT PROBLEM", e)
            else:
                if noofrecoredinsert > 0:
                    print()
                    print('RECORD INSERTED ')
                    # STEP 8 - Commit Database
                    conn.commit()
                else:
                    print('RECORD NOT INSERTED')
            finally:
                conn.close()
                selected = []
                cha = ""
                for i in range(0,len(selected)):
                    cha += str(selected[i]) + ", "
                canvas.itemconfig(txtst, text=("Seat Selected:  " + cha)[:-2])

def button_click_cancel(canvas, txtst):
    conn = None
    try:
        # STEP 2 - CONNECT WITH MYSQL DATABASE
        conn = pymysql.connect(host='127.0.0.1', user='root', password='', db='pythonProject')

    except Exception as ex:
        print('PROBLEM WITH Database Connection', ex)
    else:
        print('Database Connection SUCCESS')

    # STEP 3 - CHECK Connection is Establish or not
    if conn is not None:
        global selected
        global hall
        # STEP 4 - Create Query
        query = "delete from "+hall+" where seatID = %s"
        try:
            # STEP 6 - CREATE cursor Object
            cursor = conn.cursor()

            # STEP 7 - EXECUTE THE Query
            for i in range(0,len(selected)):
                noofrecoredinsert = cursor.execute(query, (selected[i]))
            selected = []
        except Exception as e:
            print('DELETE PROBLEM ', e)
            tkinter.messagebox.showerror("Notice: DELETE PROBLEM", e)
        else:
            if noofrecoredinsert > 0:
                print()
                print('RECORD DELETED ')
                # STEP 8 - Commit Database
                conn.commit()
            else:
                print('RECORD NOT INSERTED')
        finally:
            conn.close()
            selected = []
            cha = ""
            for i in range(0,len(selected)):
                cha += str(selected[i]) + ", "
            canvas.itemconfig(txtst, text=("Seat Selected:  " + cha)[:-2])

def select(chrID, canvas, txtst, txttl):
    for i in range(0,len(taken)):
        if (taken[i] == chrID and user != userID[i] and CurrentSession != "admin"): #selected but not by the user
            return 0
    found = False
    cha = ""
    for i in range(0,len(selected)):
        if(selected[i] == chrID):
            found = True
            selected.pop(i)
            userID.pop(i)
            break
    if found == False: 
        selected.append(chrID)
        userID.append(user)
    for i in range(0,len(selected)):
        cha += str(selected[i]) + ", "
    total = 20 * len(selected)
    canvas.itemconfig(txtst, text=("Seat Selected:  " + cha)[:-2])
    canvas.itemconfig(txttl, text=("Total: $" + str(total)))

def checkstatus(button_3, button_7, button_1, button_11, button_5, button_9, button_4, button_8, button_2, button_12, button_10, button_6): 
    button_3.configure(image=Inicheckstatus(1))
    button_7.configure(image=Inicheckstatus(2))
    button_1.configure(image=Inicheckstatus(3))
    button_11.configure(image=Inicheckstatus(4))
    button_5.configure(image=Inicheckstatus(5))
    button_9.configure(image=Inicheckstatus(6))
    button_4.configure(image=Inicheckstatus(7))
    button_8.configure(image=Inicheckstatus(8))
    button_2.configure(image=Inicheckstatus(9))
    button_12.configure(image=Inicheckstatus(10))
    button_6.configure(image=Inicheckstatus(11))
    button_10.configure(image=Inicheckstatus(12))
        
def Inicheckstatus(chrID):
    for i in range(0,len(taken)):
        if (taken[i] == chrID and user == userID[i]): #selected by the user
            return SeatSelected
        elif (taken[i] == chrID and user != userID[i]): #selected but not by the user
            return SeatTaken
    return SeatNotSelected

def Aftcheckstatus(chrID):
    for i in range(0,len(taken)):
        if (taken[i] == chrID and user != userID[i]): #selected but not by the user
            return SeatTaken
    for i in range(0,len(selected)):
        if (selected[i] == chrID and user == userID[i]): #selected by the user
            return SeatSelected
    return SeatNotSelected

def login():
    canvas = Canvas(
    window,
    bg="black",
    height=700,
    width=1400,
    bd=0,
    highlightthickness=0,
    relief="ridge"
    )

    canvas.place(x=0, y=0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_4.png"))
    image_1 = canvas.create_image(
        700.0,
        350.0,
        image=image_image_1
    )

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_5.png"))
    image_2 = canvas.create_image(
        400.0,
        350.0,
        image=image_image_2
    )

    image_image_3 = PhotoImage(
        file=relative_to_assets("image_6.png"))
    image_3 = canvas.create_image(
        700.0,
        350.0,
        image=image_image_3
    )

    canvas.create_rectangle(
        898.0,
        106.0,
        900.0,
        173.0,
        fill="#000000",
        outline="")

    canvas.create_text(
        925.0,
        120.0,
        anchor="nw",
        text="Login",
        fill="#000000",
        font=("RobotoRoman Bold", 32 * -1)
    )

    canvas.create_text(
        748.0,
        300.0,
        anchor="nw",
        text="Password",
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 24 * -1)
    )

    canvas.create_text(
        750.0,
        200.0,
        anchor="nw",
        text="Username",
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 24 * -1)
    )

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_4.png"))
    entry_bg_1 = canvas.create_image(
        1000.0,
        355.0,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        show= "*",
        font=("Roboto", 15),
        highlightthickness=0
    )
    entry_1.place(
        x=760.0,
        y=330.0,
        width=480.0,
        height=45.0
    )

    entry_image_2 = PhotoImage(
        file=relative_to_assets("entry_2.png"))
    entry_bg_2 = canvas.create_image(
        1000.0,
        255.0,
        image=entry_image_2
    )
    entry_2 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        #show="*",
        font=("Roboto", 15),
        highlightthickness=0
    )
    entry_2.place(
        x=760.0,
        y=230.0,
        width=480.0,
        height=45.0
    )

    def button_1_click():
        conn = None
        global user
        global CurrentSession
        global username
        global email
        try:
            # STEP 2 - CONNECT WITH MYSQL DATABASE
            conn = pymysql.connect(host='127.0.0.1', user='root', password='', db='pythonProject')

        except Exception as ex:
            print('PROBLEM WITH Database Connection', ex)
        else:
            print('Database Connection SUCCESS')

        # STEP 3 - CHECK Connection is Establish or not
        if conn is not None:

            # STEP 4 - Create Query
            query = "select * from users where username = %s and password = %s"
            try:
                # STEP - 5 TAKE INPUT FROM USER
                name = entry_2.get()
                password = entry_1.get()

            except Exception as e:
                print('INPUT ERROR ', e)
            else:
                try:
                    # STEP 5 - CREATE cursor Object
                    cursor = conn.cursor()

                    # STEP 6 - EXECUTE THE Query
                    records = cursor.execute(query, (name, password))

                except Exception as e:
                    print('RECORD FETCHING PROBLEM ', e)

                else:
                    # STEP 7 - DISPLAY RECORDS
                    if name == "admin" and password == "admin": 
                        user = 0
                        email = "admin"
                        username = "admin"
                        CurrentSession = "admin"   
                        home_screen()

                    elif records == 0:
                        tkinter.messagebox.showerror("Notice", "Your username or password is incorrect.")
                    else:
                        for record in cursor:
                            user = record[0]
                            email = record[1]
                            username = record[2]
                            CurrentSession = "user"
                        # Fetch Each Record In Dictionary Format
                        home_screen()

                finally:
                    # STEP 8 - CLOSE CONNECTION
                    conn.close()

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: button_1_click(),
        relief="flat"
    )
    button_1.place(
        x=925.0,
        y=410.0,
        width=150.0,
        height=50.0
    )
    canvas.create_oval(900, 410, 950, 459, fill="#EE3F3F", outline="")
    canvas.create_oval(1050, 410, 1100, 459, fill="#EE3F3F", outline="")

    button_image_hover_1 = PhotoImage(
        file=relative_to_assets("button_hover_1.png"))


    def button_1_hover(e):
        button_1.config(
            image=button_image_hover_1
        )
        canvas.create_oval(900, 410, 950, 459, fill="#992929", outline="")
        canvas.create_oval(1050, 410, 1100, 459, fill="#992929", outline="")


    def button_1_leave(e):
        button_1.config(
            image=button_image_1
        )
        canvas.create_oval(900, 410, 950, 459, fill="#EE3F3F", outline="")
        canvas.create_oval(1050, 410, 1100, 459, fill="#EE3F3F", outline="")


    button_1.bind('<Enter>', button_1_hover)
    button_1.bind('<Leave>', button_1_leave)

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: register(),
        relief="flat"
    )
    button_2.place(
        x=750.0,
        y=120.0,
        width=121.0,
        height=40.0
    )

    button_image_hover_2 = PhotoImage(
        file=relative_to_assets("button_hover_3.png"))


    def button_2_hover(e):
        button_2.config(
            image=button_image_hover_2
        )


    def button_2_leave(e):
        button_2.config(
            image=button_image_2
        )


    button_2.bind('<Enter>', button_2_hover)
    button_2.bind('<Leave>', button_2_leave)

    canvas.create_rectangle(
        750.0,
        120.0,
        871.0,
        160.0,
        fill="#000000",
        outline="")
    window.resizable(False, False)
    window.mainloop()

def register(): 
    canvas = Canvas(
    window,
    bg="black",
    height=700,
    width=1400,
    bd=0,
    highlightthickness=0,
    relief="ridge"
    )

    canvas.place(x=0, y=0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_4.png"))
    image_1 = canvas.create_image(
        700.0,
        350.0,
        image=image_image_1
    )

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_5.png"))
    image_2 = canvas.create_image(
        400.0,
        350.0,
        image=image_image_2
    )

    image_image_3 = PhotoImage(
        file=relative_to_assets("image_6.png"))
    image_3 = canvas.create_image(
        700.0,
        350.0,
        image=image_image_3
    )

    canvas.create_rectangle(
        898.0,
        106.0,
        900.0,
        173.0,
        fill="#000000",
        outline="")

    canvas.create_text(
        750.0,
        120.0,
        anchor="nw",
        text="Register",
        fill="#000000",
        font=("RobotoRoman Bold", 32 * -1)
    )

    canvas.create_text(
        748.0,
        400.0,
        anchor="nw",
        text="Password",
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 24 * -1)
    )

    canvas.create_text(
        750.0,
        200.0,
        anchor="nw",
        text="Email",
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 24 * -1)
    )

    canvas.create_text(
        748.0,
        300.0,
        anchor="nw",
        text="Username",
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 24 * -1)
    )

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_4.png"))
    entry_bg_1 = canvas.create_image(
        1000.0,
        355.0,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        #show="*",
        font=("Roboto", 15),
        highlightthickness=0
    )
    entry_1.place(
        x=760.0,
        y=330.0,
        width=480.0,
        height=45.0
    )

    entry_image_2 = PhotoImage(
        file=relative_to_assets("entry_2.png"))
    entry_bg_2 = canvas.create_image(
        1000.0,
        455.0,
        image=entry_image_2
    )
    entry_2 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        show= "*",
        font=("Roboto", 15),
        highlightthickness=0
    )
    entry_2.place(
        x=760.0,
        y=430.0,
        width=480.0,
        height=45.0
    )

    entry_image_3 = PhotoImage(
        file=relative_to_assets("entry_3.png"))
    entry_bg_3 = canvas.create_image(
        1000.0,
        255.0,
        image=entry_image_3
    )
    entry_3 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        #show= "*",
        font=("Roboto", 15),
        highlightthickness=0
    )
    entry_3.place(
        x=760.0,
        y=230.0,
        width=480.0,
        height=45.0
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: button_click_reg(entry_1, entry_2, entry_3),
        relief="flat"
    )
    button_1.place(
        x=925.0,
        y=510.0,
        width=150.0,
        height=50.0
    )
    canvas.create_oval(900, 510, 950, 559, fill="#EE3F3F", outline="")
    canvas.create_oval(1050, 510, 1100, 559, fill="#EE3F3F", outline="")

    button_image_hover_1 = PhotoImage(
        file=relative_to_assets("button_hover_1.png"))


    def button_1_hover(e):
        button_1.config(
            image=button_image_hover_1
        )
        canvas.create_oval(900, 510, 950, 559, fill="#992929", outline="")
        canvas.create_oval(1050, 510, 1100, 559, fill="#992929", outline="")


    def button_1_leave(e):
        button_1.config(
            image=button_image_1
        )
        canvas.create_oval(900, 510, 950, 559, fill="#EE3F3F", outline="")
        canvas.create_oval(1050, 510, 1100, 559, fill="#EE3F3F", outline="")


    button_1.bind('<Enter>', button_1_hover)
    button_1.bind('<Leave>', button_1_leave)

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: login(),
        relief="flat"
    )
    button_2.place(
        x=925.0,
        y=120.0,
        width=121.0,
        height=40.0
    )

    button_image_hover_2 = PhotoImage(
        file=relative_to_assets("button_hover_2.png"))


    def button_2_hover(e):
        button_2.config(
            image=button_image_hover_2
        )


    def button_2_leave(e):
        button_2.config(
            image=button_image_2
        )


    button_2.bind('<Enter>', button_2_hover)
    button_2.bind('<Leave>', button_2_leave)

    canvas.create_rectangle(
        925.0,
        120.0,
        1046.0,
        160.0,
        fill="#000000",
        outline="")
    window.resizable(False, False)
    window.mainloop()

def set_hall(num, movname): 
    global hall
    global moviename
    if num == 1: 
        hall = "hall1"
        moviename = movname
        booking()
    elif num == 2:
        hall = "hall2"
        moviename = movname
        booking()
    elif num == 3:
        hall = "hall3"
        moviename = movname
        booking()
    elif num == 4:
        hall = "hall4"
        moviename = movname
        booking()

def booking():
    window.geometry("1300x700")

    updatetaken()

    canvas = Canvas(
        window,
        bg = "#FFFFFF",
        height = 700,
        width = 1300,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        650.0,
        350.0,
        image=image_image_1
    )

    image_image_3 = PhotoImage(
        file=relative_to_assets("image_3.png"))
    image_3 = canvas.create_image(
        385.99786376953125,
        140.5,
        image=image_image_3
    )

    image_image_4 = PhotoImage(
        file=relative_to_assets("GreyLine.png"))
    image_4 = canvas.create_image(
        387.0,
        227.0,
        image=image_image_4
    )

    image_image_5 = PhotoImage(
        file=relative_to_assets("GreyLineShort.png"))
    image_5 = canvas.create_image(
        992.0,
        321.0,
        image=image_image_5
    )

    image_image_6 = PhotoImage(
        file=relative_to_assets("GreyLine.png"))
    image_6 = canvas.create_image(
        387.0,
        472.0,
        image=image_image_6
    )

    image_image_7 = PhotoImage(
        file=relative_to_assets("GreyLine.png"))
    image_7 = canvas.create_image(
        387.0,
        112.0,
        image=image_image_7
    )

    canvas.create_text(
        348.0,
        151.0,
        anchor="nw",
        text="SCREEN",
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 21 * -1)
    )

    canvas.create_text(
        87.0,
        42.0,
        anchor="nw",
        text="Seat Selection",
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 24 * -1)
    )

    canvas.create_text(
        762.0,
        42.0,
        anchor="nw",
        text="Booking Details",
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 24 * -1)
    )

    txtst = canvas.create_text(
        780.0,
        117.0,
        anchor="nw",
        text="Seat Selected: ",
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 20 * -1)
    )

    canvas.create_text(
        780.0,
        340.0,
        anchor="nw",
        text=("Movie: " + moviename),
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 20 * -1)
    )

    canvas.create_text(
        780.0,
        385.0,
        anchor="nw",
        text= ("Hall No: " + hall[4:]),
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 20 * -1)
    )

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        1029.5,
        447.0,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        font=("Roboto", 15),
        highlightthickness=0
    )
    entry_1.place(
        x=886.0,
        y=429.0,
        width=287.0,
        height=28.0
    )

    canvas.create_text(
        780.0,
        430.0,
        anchor="nw",
        text="Voucher:",
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 20 * -1)
    )

    txttl = canvas.create_text(
        817.0,
        485.0,
        anchor="nw",
        text="Total: ",
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 35 * -1)
    )

    canvas.create_text(
        331.0,
        556.0,
        anchor="nw",
        text="Adult regular seat",
        fill="#CCCCCC",
        font=("RobotoRoman Bold", 14 * -1)
    )

    canvas.create_text(
        370.0,
        581.0,
        anchor="nw",
        text="$20",
        fill="#FFFFFF",
        font=("RobotoRoman Bold", 20 * -1)
    )

    #Chair ID: 1
    button_3 = Button(
        image=Inicheckstatus(1),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [select(1, canvas, txtst, txttl),button_3.configure(image=Aftcheckstatus(1))],
        relief="flat"
    )
    button_3.place(
        x=212.0,
        y=284.0,
        width=44.0,
        height=44.0
    )

    #Chair ID: 2
    button_7 = Button(
        image=Inicheckstatus(2),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [select(2, canvas, txtst, txttl),button_7.configure(image=Aftcheckstatus(2))],
        relief="flat"
    )
    button_7.place(
        x=256.0,
        y=284.0,
        width=44.0,
        height=44.0
    )

    #Chair ID: 3
    button_1 = Button(
        image=Inicheckstatus(3),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [select(3, canvas, txtst, txttl),button_1.configure(image=Aftcheckstatus(3))],
        relief="flat"
    )
    button_1.place(
        x=343.0,
        y=284.0,
        width=44.0,
        height=44.0
    )

    #Chair ID: 4
    button_11 = Button(
        image=Inicheckstatus(4),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [select(4, canvas, txtst, txttl),button_11.configure(image=Aftcheckstatus(4))],
        relief="flat"
    )
    button_11.place(
        x=387.0,
        y=284.0,
        width=44.0,
        height=44.0
    )

    #Chair ID: 5
    button_5 = Button(
        image=Inicheckstatus(5),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [select(5, canvas, txtst, txttl),button_5.configure(image=Aftcheckstatus(5))],
        relief="flat"
    )
    button_5.place(
        x=474.0,
        y=284.0,
        width=44.0,
        height=44.0
    )

    #Chair ID: 6
    button_9 = Button(
        image=Inicheckstatus(6),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [select(6, canvas, txtst, txttl),button_9.configure(image=Aftcheckstatus(6))],
        relief="flat"
    )
    button_9.place(
        x=518.0,
        y=284.0,
        width=44.0,
        height=44.0
    )

    #Chair ID: 7
    button_4 = Button(
        image=Inicheckstatus(7),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [select(7, canvas, txtst, txttl),button_4.configure(image=Aftcheckstatus(7))],
        relief="flat"
    )
    button_4.place(
        x=212.0,
        y=370.0,
        width=44.0,
        height=44.0
    )

    #Chair ID: 8
    button_8 = Button(
        image=Inicheckstatus(8),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [select(8, canvas, txtst, txttl),button_8.configure(image=Aftcheckstatus(8))],
        relief="flat"
    )
    button_8.place(
        x=256.0,
        y=370.0,
        width=44.0,
        height=44.0
    )

    #Chair ID: 9
    button_2 = Button(
        image=Inicheckstatus(9),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [select(9, canvas, txtst, txttl),button_2.configure(image=Aftcheckstatus(9))],
        relief="flat"
    )
    button_2.place(
        x=343.0,
        y=370.0,
        width=44.0,
        height=44.0
    )

    #Chair ID: 10
    button_12 = Button(
        image=Inicheckstatus(10),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [select(10, canvas, txtst, txttl),button_12.configure(image=Aftcheckstatus(10))],
        relief="flat"
    )
    button_12.place(
        x=387.0,
        y=370.0,
        width=44.0,
        height=44.0
    )

    #Chair ID: 11
    button_6 = Button(
        image=Inicheckstatus(11),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [select(11, canvas, txtst, txttl),button_6.configure(image=Aftcheckstatus(11))],
        relief="flat",
    )
    button_6.place(
        x=474.0,
        y=370.0,
        width=44.0,
        height=44.0
    )

    #Chair ID: 12
    button_10 = Button(
        image=Inicheckstatus(12),
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [select(12, canvas, txtst, txttl),button_10.configure(image=Aftcheckstatus(12))],
        relief="flat",
    )
    button_10.place(
        x=518.0,
        y=370.0,
        width=44.0,
        height=44.0
    )

    button_image_13 = PhotoImage(
        file=relative_to_assets("button_13.png"))
    button_13 = Button(
        image=button_image_13,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [button_click_book(entry_1, canvas, txttl, txtst), updatetaken(), checkstatus(button_3, button_7, button_1, button_11, button_5, button_9, button_4, button_8, button_2, button_12, button_10, button_6)],
        relief="flat"
    )
    button_13.place(
        x=860.0,
        y=555.0,
        width=109.0,
        height=38.0
    )

    button_image_hover_1 = PhotoImage(
        file=relative_to_assets("button_hover_13.png"))

    def button_1_hover(e):
        button_13.config(
            image=button_image_hover_1
        )
    def button_1_leave(e):
        button_13.config(
            image=button_image_13
        )

    button_13.bind('<Enter>', button_1_hover)
    button_13.bind('<Leave>', button_1_leave)

    button_image_14 = PhotoImage(
        file=relative_to_assets("button_14.png"))
    button_14 = Button(
        image=button_image_14,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [button_click_cancel(canvas, txtst), updatetaken(), checkstatus(button_3, button_7, button_1, button_11, button_5, button_9, button_4, button_8, button_2, button_12, button_10, button_6)],
        relief="flat"
    )
    button_14.place(
        x=1017.0,
        y=554.0,
        width=109.0,
        height=38.0
    )

    button_image_hover_2 = PhotoImage(
        file=relative_to_assets("button_hover_14.png"))

    def button_2_hover(e):
        button_14.config(
            image=button_image_hover_2
        )
    def button_2_leave(e):
        button_14.config(
            image=button_image_14
        )

    button_14.bind('<Enter>', button_2_hover)
    button_14.bind('<Leave>', button_2_leave)

    
    image_image_8 = PhotoImage(
        file=relative_to_assets("image_8.png"))
    image_8 = canvas.create_image(
        33.0,
        36.0,
        image=image_image_8
    )

    button_image_15 = PhotoImage(
        file=relative_to_assets("button_15.png"))
    button_15 = Button(
        image=button_image_15,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: home_screen(),
        relief="flat"
    )
    button_15.place(
        x=12.0,
        y=17.0,
        width=48.0,
        height=43.0
    )

    button_image_hover_15 = PhotoImage(
        file=relative_to_assets("button_hover_15.png"))

    def button_15_hover(e):
        button_15.config(
            image=button_image_hover_15
        )
    def button_15_leave(e):
        button_15.config(
            image=button_image_15
        )

    button_15.bind('<Enter>', button_15_hover)
    button_15.bind('<Leave>', button_15_leave)

    image_image_9 = PhotoImage(
        file=relative_to_assets("image_9.png"))
    image_9 = canvas.create_image(
        387.0,
        523.0,
        image=image_image_9
    )

    image_image_10 = PhotoImage(
        file=relative_to_assets("image_10.png"))
    image_10 = canvas.create_image(
        992.0,
        233.0,
        image=image_image_10
    )
    window.resizable(True, True)
    window.mainloop()

def logout():
    global CurrentSession
    global user
    global count
    CurrentSession = "admin" #default
    user = 0
    count = 0
    login()

def home_screen():
    window.geometry("1400x700")

    canvas = Canvas(
        window,
        bg="#000000",
        height=700,
        width=1400,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )

    canvas.place(x=0, y=0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_11.png"))
    image_1 = canvas.create_image(
        600.0,
        350.0,
        image=image_image_1
    )

    def make_panel(pic, date, title, x, y, halls, movname):
        # Button/Image
        button = canvas.create_window(
            x, y,
            anchor="nw",
            width=300,
            height=450,
            window=Button(
                canvas,
                image=pic,
                borderwidth=0,
                highlightthickness=0,
                command=lambda: [set_hall(halls, movname)],
                relief="flat"
            )
        )

        # Date
        date = canvas.create_text(
            x,
            y + 455,
            anchor="nw",
            text=date,
            fill="#7F7F7F",
            font=("EkMukta Regular", 20 * -1)
        )

        # Title
        title = canvas.create_text(
            x,
            y + 478,
            anchor="nw",
            text=title,
            fill="#FFFFFF",
            font=("Kokoro Regular", 20 * -1)
        )
        return [button, date, title]


    movie_1 = PhotoImage(
        file=relative_to_assets("button_21.png"))

    movie_2 = PhotoImage(
        file=relative_to_assets("button_22.png"))

    movie_3 = PhotoImage(
        file=relative_to_assets("button_23.png"))

    movie_4 = PhotoImage(
        file=relative_to_assets("button_24.png"))

    date = "25 Jun 2024"
    title1 = "Hall 4: John Wick: Chapter 4"
    title2 = "Hall 3: Kung Fu Panda 4"
    title3 = "Hall 2: Inside Out 2"
    title4 = "Hall 1: Avengers: End Game"

    movies = []
    movies.append([movie_4, date, title4, 1, "Avengers: End Game"])
    movies.append([movie_3, date, title3, 2, "Inside Out 2" ])
    movies.append([movie_2, date, title2, 3, "Kung Fu Panda 4"])
    movies.append([movie_1, date, title1, 4, "John Wick: Chapter 4"])

    id = []
    id.append(make_panel(movies[3][0], movies[3][1], movies[3][2], 1050, 180, movies[3][3], movies[3][4]))
    id.append(make_panel(movies[2][0], movies[2][1], movies[2][2], 716.66, 180, movies[2][3], movies[2][4]))
    id.append(make_panel(movies[1][0], movies[1][1], movies[1][2], 383.33, 180, movies[1][3], movies[1][4]))
    id.append(make_panel(movies[0][0], movies[0][1], movies[0][2], 50, 180, movies[0][3], movies[0][4]))


    canvas.create_text(
        50,
        120.0,
        anchor="nw",
        text="Showings: ",
        fill="#FFFFFF",
        font=("Roboto", 28 * -1)
    )

    canvas.create_rectangle(
        -2.0,
        99.5,
        1400,
        100.5,
        fill="#FFFFFF",
        outline="")

    button_image_8 = PhotoImage(
        file=relative_to_assets("button_28.png"))
    button_8 = Button(
        image=button_image_8,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: delete_page(),
        relief="flat"
    )
    button_8.place(
        x=1150,
        y=30,
        width=200,
        height=50
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("button_25.png"))
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: logout(),
        relief="flat"
    )
    button_5.place(
        x=925,
        y=30,
        width=200,
        height=50
    )

    button_image_6 = PhotoImage(
        file=relative_to_assets("button_26.png"))
    button_6 = Button(
        image=button_image_6,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: receipt(),
        relief="flat"
    )
    button_6.place(
        x=700,
        y=30,
        width=200,
        height=50
    )

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_12.png"))
    image_2 = canvas.create_image(
        175.0,
        50.0,
        image=image_image_2
    )

    def remove_all_panels():
        p = 0
        for panel in id:
            for item in panel:
                canvas.delete(item)
        id.clear()

        name = entry_1.get()
        if name == "":
            id.append(make_panel(movies[3][0], movies[3][1], movies[3][2], 1050, 180, movies[3][3], movies[3][4]))
            id.append(make_panel(movies[2][0], movies[2][1], movies[2][2], 716.66, 180, movies[2][3], movies[2][4]))
            id.append(make_panel(movies[1][0], movies[1][1], movies[1][2], 383.33, 180, movies[1][3], movies[1][4]))
            id.append(make_panel(movies[0][0], movies[0][1], movies[0][2], 50, 180, movies[0][3], movies[0][4]))
        else:
            for movie in movies:
                if name.lower() in movie[2].lower():
                    id.append(make_panel(movie[0], movie[1], movie[2], 50 + 333.33 * p, 180, movie[3], movie[4]))
                    p += 1

    button_image_7 = PhotoImage(
        file=relative_to_assets("button_27.png"))
    button_7 = Button(
        image=button_image_7,
        borderwidth=0,
        highlightthickness=0,
        command= remove_all_panels,
        relief="flat"
    )
    button_7.place(
        x=253.0,
        y=33.0,
        width=35.0,
        height=34.0
    )

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_5.png"))
    entry_bg_1 = canvas.create_image(
        157.5,
        50.0,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#362B2B",
        font=("Roboto", 13),
        fg="#FFFFFF",
        highlightthickness=0
    )
    entry_1.place(
        x=70.0,
        y=35.0,
        width=175.5,
        height=30.0
    )

    window.resizable(False, False)
    window.mainloop()

def delete(entry_1):
    conn = None
    try:
        # STEP 2 - CONNECT WITH MYSQL DATABASE
        conn = pymysql.connect(host='127.0.0.1', user='root', password='', db='pythonProject')

    except Exception as ex:
        print('PROBLEM WITH Database Connection', ex)
    else:
        print('Database Connection SUCCESS')

    # STEP 3 - CHECK Connection is Establish or not
    if conn is not None:

        # STEP 4 - Create Query
        query = "Delete from users where id = %s"
        try:
            # STEP - 5 TAKE INPUT FROM USER
            ID = entry_1.get()
        except Exception as e:
            print('INPUT ERROR ', e)
        else:
            try:
                # STEP 6 - CREATE cursor Object
                cursor = conn.cursor()

                # STEP 7 - EXECUTE THE Query
                noofrecoredinsert = cursor.execute(query, (ID))
            except Exception as e:
                print('DELETE PROBLEM ', e)
            else:
                if noofrecoredinsert > 0:
                    print()
                    print('RECORD DELETED from users')
                    tkinter.messagebox.showinfo("Notice", "Account deleted")
                    # STEP 8 - Commit Database
                    conn.commit()
                else:
                    print('RECORD NOT INSERTED')
                    tkinter.messagebox.showerror("Notice", "No account exist with that ID")
            finally:
                conn.close()

    #delete the data associated with that user (can probably optimize this by combining with the top part but too lazy)
    conn = None
    try:
        # STEP 2 - CONNECT WITH MYSQL DATABASE
        conn = pymysql.connect(host='127.0.0.1', user='root', password='', db='pythonProject')

    except Exception as ex:
        print('PROBLEM WITH Database Connection', ex)
    else:
        print('Database Connection SUCCESS')

    # STEP 3 - CHECK Connection is Establish or not
    if conn is not None:
        halls = ["1", "2", "3", "4"]
        # STEP 4 - Create Query
        for i in range (0, len(halls)): 
            query = "delete from hall" + halls[i] + " where id = %s"
            try:
                # STEP 5 - CREATE cursor Object
                cursor = conn.cursor()

                # STEP 6 - EXECUTE THE Query
                noofrecoredinsert = cursor.execute(query, (ID))
            except Exception as e:
                print('DELETE PROBLEM ', e)
            else:
                if noofrecoredinsert > 0:
                    print()
                    print('RECORD DELETED ')
                    # STEP 8 - Commit Database
                    conn.commit()        
    conn.close()

def delete_page(): 
    global count
    global user
    if count == 0 and CurrentSession != "admin": 
        tkinter.messagebox.showwarning("Are you sure?", "Press again to proceed with account deletion")
        count = count + 1
    elif count == 1 and CurrentSession != "admin": 
        conn = None
        try:
            # STEP 2 - CONNECT WITH MYSQL DATABASE
            conn = pymysql.connect(host='127.0.0.1', user='root', password='', db='pythonProject')

        except Exception as ex:
            print('PROBLEM WITH Database Connection', ex)
        else:
            print('Database Connection SUCCESS')

        # STEP 3 - CHECK Connection is Establish or not
        if conn is not None:
            # STEP 4 - Create Query
            query = "Delete from users where id = %s"
            try:
                # STEP 6 - CREATE cursor Object
                cursor = conn.cursor()

                # STEP 7 - EXECUTE THE Query
                noofrecoredinsert = cursor.execute(query, (user))
            except Exception as e:
                print('DELETE PROBLEM ', e)
            else:
                if noofrecoredinsert > 0:
                    print()
                    print('RECORD DELETED from users')
                    # STEP 8 - Commit Database
                    conn.commit()
                else:
                    print('RECORD NOT INSERTED')
            finally:
                conn.close()
        #delete the data associated with that user (can probably optimize this by combining with the top part but too lazy)
        conn = None
        try:
            # STEP 2 - CONNECT WITH MYSQL DATABASE
            conn = pymysql.connect(host='127.0.0.1', user='root', password='', db='pythonProject')

        except Exception as ex:
            print('PROBLEM WITH Database Connection', ex)
        else:
            print('Database Connection SUCCESS')

        # STEP 3 - CHECK Connection is Establish or not
        if conn is not None:
            halls = ["1", "2", "3", "4"]
            # STEP 4 - Create Query
            for i in range (0, len(halls)): 
                query = "delete from hall" + halls[i] + " where id = %s"
                try:
                    # STEP 5 - CREATE cursor Object
                    cursor = conn.cursor()

                    # STEP 6 - EXECUTE THE Query
                    noofrecoredinsert = cursor.execute(query, (user))
                except Exception as e:
                    print('DELETE PROBLEM ', e)
                else:
                    if noofrecoredinsert > 0:
                        print()
                        print('RECORD DELETED ')
                        # STEP 8 - Commit Database
                        conn.commit()        
        conn.close()
        tkinter.messagebox.showinfo("Notice", "Account '" + username + "' has been deleted.")
        logout()
    elif CurrentSession == "admin":           
        window.geometry("800x700")
        canvas = Canvas(
            window,
            bg = "#000000",
            height = 700,
            width = 800,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        image_image_1 = PhotoImage(
            file=relative_to_assets("image_31.png"))
        image_1 = canvas.create_image(
            400,
            350,
            image=image_image_1
        )

        button_image_1 = PhotoImage(
            file=relative_to_assets("button_31.png"))
        button_1 = Button(
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: home_screen(),
            relief="flat"
        )
        button_1.place(
            x=16.0,
            y=14.0,
            width=62.0,
            height=49.0
        )

        button_image_hover_1 = PhotoImage(
            file=relative_to_assets("button_hover_31.png"))

        def button_1_hover(e):
            button_1.config(
                image=button_image_hover_1
            )
        def button_1_leave(e):
            button_1.config(
                image=button_image_1
            )

        button_1.bind('<Enter>', button_1_hover)
        button_1.bind('<Leave>', button_1_leave)

        image_image_2 = PhotoImage(
            file=relative_to_assets("image_32.png"))
        image_2 = canvas.create_image(
            400.0,
            364.0,
            image=image_image_2
        )

        entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_31.png"))
        entry_bg_1 = canvas.create_image(
            581.0,
            118.0,
            image=entry_image_1
        )
        entry_1 = Entry(
            bd=0,
            bg="#FFFFFF",
            font=("Roboto", 13),
            fg="#000716",
            highlightthickness=0
        )
        entry_1.place(
            x=517.0,
            y=101.0,
            width=128.0,
            height=28.0
        )

        entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_32.png"))
        entry_bg_2 = canvas.create_image(
            400,
            370,
            image=entry_image_2
        )

        def show():
            for row in listBox.get_children():
                listBox.delete(row)
            conn = pymysql.connect(host='127.0.0.1', user='root', password='', db='pythonProject')
            mycursor = conn.cursor()
            mycursor.execute("select ID,username,email from users")
            records = mycursor.fetchall()
            print(records)

            for i, (UID, uname, uemail) in enumerate(records, start=1):
                listBox.insert("", "end", values=(UID, uname, uemail))
            conn.close()

        cols = ('id', 'username', 'email')
        listBox = ttk.Treeview(columns=cols, show='headings')

        for col in cols:
            listBox.heading(col, text=col)    
            listBox.grid(row=1, column=0, columnspan=2)
            listBox.place(
            x=145.0, 
            y=165.0)
            listBox.column(column= col, minwidth=0, width=170)

        canvas.create_text(
            106.0,
            102.0,
            anchor="nw",
            text="Enter the ID of the user you wish to remove:",
            fill="#000000",
            font=("RobotoRoman Bold", 20 * -1)
        )
                
        button_image_2 = PhotoImage(
            file=relative_to_assets("button_32.png"))
        button_2 = Button(
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [delete(entry_1), show()],
            relief="flat"
        )
        button_2.place(
            x=661.0,
            y=100.0,
            width=35.0,
            height=35.0
        )

        button_image_hover_2 = PhotoImage(
            file=relative_to_assets("button_hover_32.png"))

        def button_2_hover(e):
            button_2.config(
                image=button_image_hover_2
            )
        def button_2_leave(e):
            button_2.config(
                image=button_image_2
            )

        button_2.bind('<Enter>', button_2_hover)
        button_2.bind('<Leave>', button_2_leave)
        window.resizable(False, False)
        show()
        window.mainloop()

def receipt():
    window.geometry("1300x700")
    canvas = Canvas(
        window,
        bg = "#000000",
        height = 700,
        width = 1300,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_31.png"))
    image_1 = canvas.create_image(
        657.0,
        350.0,
        image=image_image_1
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_33.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: home_screen(),
        relief="flat"
    )
    button_1.place(
        x=13.0,
        y=7.0,
        width=43.0,
        height=52.0
    )

    button_image_hover_1 = PhotoImage(
        file=relative_to_assets("button_hover_33.png"))

    def button_1_hover(e):
        button_1.config(
            image=button_image_hover_1
        )
    def button_1_leave(e):
        button_1.config(
            image=button_image_1
        )

    button_1.bind('<Enter>', button_1_hover)
    button_1.bind('<Leave>', button_1_leave)

    canvas.create_rectangle(
        77.0,
        59.0,
        1224.0,
        642.0,
        fill="#E4E4E4",
        outline="")

    canvas.create_rectangle(
        599.0,
        87.0,
        1194.0,
        607.0,
        fill="#FFFFFF",
        outline="")

    canvas.create_rectangle(
        148.0,
        517.0,
        459.0,
        587.0,
        fill="#FFFFFF",
        outline="")

    canvas.create_text(
        133.0,
        87.0,
        anchor="nw",
        text="Receipt",
        fill="#000000",
        font=("RobotoRoman Bold", 48 * -1)
    )

    canvas.create_text(
        133.0,
        210.0,
        anchor="nw",
        text="Name: " + username,
        fill="#000000",
        font=("RobotoRoman Bold", 32 * -1)
    )

    canvas.create_text(
        133.0,
        291.0,
        anchor="nw",
        text="Email: " + email,
        fill="#000000",
        font=("RobotoRoman Bold", 32 * -1)
    )

    canvas.create_text(
        133.0,
        453.0,
        anchor="nw",
        text="Voucher-applied total: ",
        fill="#000000",
        font=("RobotoRoman Bold", 32 * -1)
    )

    total = 0 
    vtotal = 0
    chairtxt = ""
    try:
        # STEP 2 - CONNECT WITH MYSQL DATABASE
        conn = pymysql.connect(host='127.0.0.1', user='root', password='', db='pythonProject')

    except Exception as ex:
        print('PROBLEM WITH Database Connection', ex)
    else:
        print('Database Connection SUCCESS')

        # STEP 3 - CHECK Connection is Establish or not
        if conn is not None:

            halls = ["1", "2", "3", "4"]
            # STEP 4 - Create Query
            for i in range (0, len(halls)): 
                query = "select * from hall" + halls[i] + " where id = %s"
                try:
                    # STEP 5 - CREATE cursor Object
                    cursor = conn.cursor()

                    # STEP 6 - EXECUTE THE Query
                    records = cursor.execute(query, (user))

                except Exception as e:
                    print('RECORD FETCHING PROBLEM ', e)

                else:
                    if records != 0:
                        chairtxt = chairtxt + "hall " + halls[i] + ": "
                        for record in cursor:
                            chairtxt = chairtxt + "seat " + str(record[0]) + ", "
                            if record[2] == 1: 
                                total += 20
                                vtotal += 16      #16 = 20  * 0.8
                            else: 
                                total += 20
                                vtotal += 20
                        chairtxt = chairtxt[:-2]
                        chairtxt += "\n \n"
            if chairtxt == "": 
                chairtxt = "ya got no bookings"
            conn.close()

    canvas.create_text(
        628.0,
        104.0,
        width="560",
        anchor="nw",
        text=chairtxt,
        fill="#000000",
        font=("RobotoRoman Bold", 32 * -1)
    )
    
    canvas.create_text(
        182.0,
        532.0,
        anchor="nw",
        text= "$" + str(vtotal),
        fill="red",
        font=("RobotoRoman Bold", 32 * -1)
    )

    canvas.create_text(
        133.0,
        372.0,
        anchor="nw",
        text="Total: $" + str(total),
        fill="#000000",
        font=("RobotoRoman Bold", 32 * -1)
    )

    canvas.create_rectangle(
        132.0,
        158.0,
        303.0,
        159.0,
        fill="#000000",
        outline="")
    window.resizable(False, False)
    window.mainloop()


register()

'''
FOR SQL 

create database pythonProject;
use pythonProject;

create table users 
(
	ID int Primary key auto_increment,
	email varchar(30),
	username varchar(20) NOT NULL unique,
	password varchar(20) NOT NULL
);

create table hall1
(
	SeatID int primary key,
   	ID int,
   	voucher boolean
);


create table hall2  
(
	SeatID int primary key,
    	ID int,
    	voucher boolean
);

create table hall3
(
	SeatID int primary key,
    	ID int,
    	voucher boolean
);

create table hall4
(
	SeatID int primary key,
    	ID int,
    	voucher boolean
);

!!!!! DON'T FORGET TO ADD YOUR OWN PASS TO THE CONNECTION !!!!
'''
